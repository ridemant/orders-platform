version: "3.9"

services:
  # ------------------------------
  # Zookeeper
  # ------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: apexglobal-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - apexglobal-net
    volumes:
      - ./volume/zookeeper:/var/lib/zookeeper

  # ------------------------------
  # Kafka
  # ------------------------------
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: apexglobal-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - apexglobal-net

  # ------------------------------
  # Redis
  # ------------------------------
  redis:
    image: redis:7
    container_name: apexglobal-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - apexglobal-net
    volumes:
      - ./volume/redis:/data
  # ------------------------------
  # MongoDB
  # ------------------------------
  mongo:
    image: mongo:7
    container_name: apexglobal-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - apexglobal-net
    volumes:
      - ./volume/mongo:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ------------------------------
  #  Customers API (Go)
  # ------------------------------
  customers-api:
    build:
      context: ./customers-api-go
      dockerfile: Dockerfile
    container_name: customers-api
    restart: unless-stopped
    ports:
      - "8084:8080"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - apexglobal-net
    environment:
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=customersdb
  # ------------------------------
  # orders-worker (Spring Boot)
  # ------------------------------
  orders-worker:
    build:
      context: ./orders-worker-java
      dockerfile: Dockerfile
    container_name: orders-worker
    restart: unless-stopped
    depends_on:
      - kafka
      - redis
      - mongo
      - products-api
      - customers-api
    networks:
      - apexglobal-net
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MONGODB_URI: mongodb://mongo:27017/ordersdb
      PRODUCT_SERVICE_URL: http://products-api:8080
      CUSTOMER_SERVICE_URL: http://customers-api:8080

  # ------------------------------
  # orders-producer (SpringBooT)
  # ------------------------------
  orders-producer:
    build:
      context: ./orders-producer-java
      dockerfile: Dockerfile
    container_name: orders-producer
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    networks:
      - apexglobal-net
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  # ------------------------------
  # Products API (Go)
  # ------------------------------
  products-api:
    build:
      context: ./products-api-go
      dockerfile: Dockerfile
    container_name: products-api
    restart: unless-stopped
    ports:
      - "8083:8080"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - apexglobal-net
    environment:
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=productsdb


# ------------------------------
# Red compartida
# ------------------------------
networks:
  apexglobal-net:
    driver: bridge
